/*
 * Copyright (c) 2023 Matteo Castellucci
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package io.github.cakelier
package laas.master.ws.presentation

import java.util.UUID

import laas.master.model.Executable.{ExecutableId, ExecutableType}
import laas.master.model.Execution.ExecutionArguments

/** The enum representing all possible requests that can be received by the [[laas.master.ws.service.ServiceApi]] agent through a
  * websocket connection.
  *
  * The possible requests that can be received are the ones relative to the user access, so the requests to log in, log out,
  * register and get the current user state. Another request that can be received is to launch the execution of an executable, but
  * not the deployment of one, because that request is to be made via a normal HTTP request.
  */
private[ws] enum Request {

  /** The request for logging in a user, given their username and their password.
    *
    * @constructor
    *   creates a new request given the username and the password of the user logging in
    */
  case Login(username: String, password: String) extends Request

    /** The request for logging out a user. */
  case Logout extends Request

    /** The request for getting the current state of a user, to be made after it has logged in already.
      *
      * This request is generated by the web app when the user refreshes the page or closes it and reopens it at a later moment.
      * This means that a websocket connection had been open, a connection over which the user must have had to log in, and then
      * was closed. To demonstrate that this is in fact true, this request sends the old connection id, which can be used for
      * checking the existence of the old connection.
      *
      * @constructor
      *   creates a new request given the identifier of the old connection used by the user to log in
      */
  case UserState(id: UUID) extends Request

    /** The request for registering a user, given their username and their password.
      *
      * @constructor
      *   creates a new request given the username and the password of the user logging in
      */
  case Register(username: String, password: String) extends Request

    /** The request for launching the execution of an executable, given the identifier of the executable and the arguments to be
      * passed to the process that will execute it.
      *
      * @constructor
      *   creates a new request given the identifier of the executable to execute and the arguments to be passed to the process
      *   executing it
      */
  case Execute(id: ExecutableId, args: ExecutionArguments) extends Request
}
